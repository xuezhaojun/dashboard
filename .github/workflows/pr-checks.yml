name: Pull Request Checks

on:
  pull_request:
    branches: [main, master, develop]
    types: [opened, synchronize, reopened]

jobs:
  frontend-checks:
    name: Frontend Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          retention-days: 1

  backend-checks:
    name: Backend Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go dependencies
        working-directory: ./backend
        run: go mod download

      - name: Verify Go dependencies
        working-directory: ./backend
        run: go mod verify

      - name: Run go vet
        working-directory: ./backend
        run: go vet ./...

      - name: Run go fmt check
        working-directory: ./backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            echo "Please run 'go fmt ./...' to format your code."
            exit 1
          fi

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1.3.1
        with:
          version: "2023.1.7"
          working-directory: backend

      - name: Run tests
        working-directory: ./backend
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.out
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Build backend
        working-directory: ./backend
        run: go build -v -o ocm-dashboard .

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [frontend-checks, backend-checks]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker build
        run: |
          # Create static directory in backend
          mkdir -p backend/static
          # Copy frontend build to backend static directory
          cp -r dist/* backend/static/
          # Build docker image
          docker build -t ocm-dashboard:pr-test -f backend/Dockerfile backend/

  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.go" "TODO\|FIXME" src/ backend/ || true; then
            echo "Found TODO/FIXME comments. Please review before merging."
          fi

      - name: Check file sizes
        run: |
          echo "Checking for large files..."
          find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            echo "Large file found: $file ($(du -h "$file" | cut -f1))"
          done

      - name: Validate package.json
        run: npm ls --depth=0 || true

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs:
      [
        frontend-checks,
        backend-checks,
        docker-build,
        security-checks,
        code-quality,
      ]
    if: always()

    steps:
      - name: PR Check Summary
        run: |
          echo "## Pull Request Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Checks | ${{ needs.frontend-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Checks | ${{ needs.backend-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Checks | ${{ needs.security-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.frontend-checks.result }}" == "success" && "${{ needs.backend-checks.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "🎉 All critical checks passed! This PR is ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some checks failed. Please review and fix the issues before merging." >> $GITHUB_STEP_SUMMARY
